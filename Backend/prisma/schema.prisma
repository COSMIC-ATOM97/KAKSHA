generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://SCM_owner:rAdo3QL9Jvmc@ep-tiny-flower-a15k3xwf.ap-southeast-1.aws.neon.tech/SCM?sslmode=require"
}

model Class {
  id            Int              @id @default(autoincrement())
  name          String          @unique @db.VarChar(100)
  class_teacher String          @db.VarChar(100)
  students      Student[]
  professorClasses ProfessorClass[]
  timeTables    TimeTable[]
  homework      Homework[]
  announcements Announcement[]
}
model Student {
  id         Int          @id @default(autoincrement())
  rollNo     String       @unique @db.VarChar(50) @map("roll_no")
  firstName  String       @db.VarChar(100) @map("first_name")
  lastName   String       @db.VarChar(100) @map("last_name")
  email      String       @unique @db.VarChar(150)
  password   String       @db.VarChar(255)
  classId    Int?         @map("class_id")
  semester   Int
  batch      String       @db.VarChar(50)
  dob        DateTime     @db.Date
  address    String?      @db.Text
  photo      Bytes?
  class      Class?       @relation(fields: [classId], references: [id])
  attendance Attendance[]
  results    Result[]
  submissions Submission[]
}

model Professor {
  id           Int              @id @default(autoincrement())
  firstName    String           @db.VarChar(100) @map("first_name")
  lastName     String           @db.VarChar(100) @map("last_name")
  dob          DateTime         @db.Date
  rollNo       String           @unique @db.VarChar(50) @map("roll_no")
  email        String           @unique @db.VarChar(150)
  password     String           @db.VarChar(255)
  address      String?          @db.Text
  dateOfJoin   DateTime         @db.Date @map("date_of_join")
  dept         String           @db.VarChar(100)
  photo        Bytes?
  professorClasses ProfessorClass[]
  timeTables   TimeTable[]
  homework     Homework[]
  announcements Announcement[]
}

model ProfessorClass {
  id          Int        @id @default(autoincrement())
  professorId Int        @map("professor_id")
  classId     Int        @map("class_id")
  subject     String     @db.VarChar(100)
  professor   Professor  @relation(fields: [professorId], references: [id])
  class       Class      @relation(fields: [classId], references: [id])

  @@map("professor_class")
}

model TimeTable {
  id             Int              @id @default(autoincrement())
  classId        Int              @map("class_id")
  dayOfTheWeek   String           @db.VarChar(20) @map("day_of_the_week")
  startTime      DateTime         @db.Time @map("start_time")
  endTime        DateTime         @db.Time @map("end_time")
  subject        String           @db.VarChar(100)
  room           String           @db.VarChar(50)
  professorId    Int              @map("professor_id")
  class          Class            @relation(fields: [classId], references: [id])
  professor      Professor        @relation(fields: [professorId], references: [id])
  attendance     Attendance[]
  classCancelled ClassCancelled[]
}

model Attendance {
  id           Int       @id @default(autoincrement())
  studentId    Int       @map("student_id")
  timeTableId  Int       @map("time_table_id")
  date         DateTime  @db.Date
  status       String    @db.VarChar(20)
  student      Student   @relation(fields: [studentId], references: [id])
  timeTable    TimeTable @relation(fields: [timeTableId], references: [id])

  @@unique([studentId, timeTableId, date])
}

model ClassCancelled {
  id           Int       @id @default(autoincrement())
  date         DateTime  @db.Date
  timeTableId  Int       @map("time_table_id")
  timeTable    TimeTable @relation(fields: [timeTableId], references: [id])

  @@map("class_cancelled")
}

model Homework {
  id             Int          @id @default(autoincrement())
  title          String       @db.VarChar(200)
  content        String       @db.Text
  publishDate    DateTime     @db.Date @map("publish_date")
  submissionDate DateTime     @db.Date @map("submission_date")
  professorId    Int         @map("professor_id")
  classId        Int         @map("class_id")
  fileName       String?      @db.VarChar(200) @map("file_name")
  fileLink       String?      @db.Text @map("file_link")
  totalMarks     Int?        @map("total_marks")
  professor      Professor    @relation(fields: [professorId], references: [id])
  class          Class        @relation(fields: [classId], references: [id])
  submissions    Submission[]
}

model Result {
  id          Int      @id @default(autoincrement())
  exam        String   @db.VarChar(100)
  date        DateTime @db.Date
  studentId   Int      @map("student_id")
  subject     String   @db.VarChar(100)
  marks       Int
  totalMarks  Int      @map("total_marks")
  semester    Int
  student     Student  @relation(fields: [studentId], references: [id])

  @@map("results")
}

model Submission {
  id        Int      @id @default(autoincrement())
  hwId      Int      @map("hw_id")
  studentId Int      @map("student_id")
  content   String?  @db.Text
  fileName  String?  @db.VarChar(200) @map("file_name")
  fileLink  String?  @db.Text @map("file_link")
  status    String   @db.VarChar(20)
  marks     Int?
  homework  Homework @relation(fields: [hwId], references: [id])
  student   Student  @relation(fields: [studentId], references: [id])
}

model Announcement {
  id          Int       @id @default(autoincrement())
  classId     Int       @map("class_id")
  visibility  Int
  title       String    @db.VarChar(200)
  content     String    @db.Text
  fileName    String?   @db.VarChar(200) @map("file_name")
  fileLink    String?   @db.Text @map("file_link")
  professorId Int       @map("professor_id")
  date        DateTime  @db.Date
  class       Class     @relation(fields: [classId], references: [id])
  professor   Professor @relation(fields: [professorId], references: [id])

  @@map("announcements")
}